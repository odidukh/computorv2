const solver = require("./solver");const parser = require("./parser");const reducer = require("./reduce");const calculation = require('../calculation');module.exports = equation_solver;function convert(expression) {	function realNumConverter(expression) {		let variables = expression.split(/[^a-zA-Z]/).filter(n => n);		Object.keys(savedVariables).forEach(varName => {			if (variables.includes(varName)				&& savedVariables[varName].type === 'real') {				expression = expression.replace(new RegExp("\\b" + varName + "\\b",  'g'),					savedVariables[varName].value);			}		});		return expression;	}	expression = realNumConverter(expression);	return expression;}function functionConverter(expression) {	let variables = expression.split(/[^a-zA-Z]/).filter(n => n);	Object.keys(savedVariables).forEach(varName => {		if (variables.includes(varName) &&			savedVariables[varName].type === 'function') {			while (expression.includes(varName)) {				let funcExp = savedVariables[varName].value;				let functionVariable = savedVariables[varName].variableName;				let roundBracketsCounter = 0;				let replaceVariable = '';				let substr = expression.substring(expression.indexOf(varName) + varName.length);				for (let i = 0; i < substr.length; i++) {					if (substr.charAt(i) === '(') {						roundBracketsCounter++;					} else if (substr.charAt(i) === ')') {						roundBracketsCounter--;						if (roundBracketsCounter === 0) {							replaceVariable = substr.substring(0, i + 1);							break;						}					}				}				funcExp = funcExp.replace(new RegExp("\\b" + functionVariable + "\\b", 'g'), replaceVariable);				let fullReplaceable = varName + replaceVariable;				let fullReplacing = '(' + funcExp + ')';				expression = expression.replace(fullReplaceable, fullReplacing);			}		}	});	return expression;}function polynomial_degree_getter(map_degree_coeff) {	map_degree_coeff.forEach((key, value) => {		if (key === 0) {			map_degree_coeff.delete(value);		}	});	let degree_array = Array.from(map_degree_coeff.keys());	if (degree_array.length === 0) {		return 0;	}	return Math.max.apply(null, degree_array);}function equationCheck(left, right) {	let savedVars = Object.keys(savedVariables);	for (let i = 0; i < savedVars.length; i++) {		if (savedVariables[savedVars[i]].type === 'function') {			if (left === savedVariables[savedVars[i]].fullFunctionName)				return true;		}	}	printOutput("Error: syntax error in function. Check input");	return false;}function checkUnsupportedTypes(expression) {	let variables = expression.split(/[^a-zA-Z]/).filter(n => n);	for (const varName of Object.keys(savedVariables)) {		if (variables.includes(varName) &&			(savedVariables[varName].type === 'matrix' ||				savedVariables[varName].type === 'complex')) {			printOutput("Error: unsupported data type in the equation expression")			return false;		}	}	if (variables.includes('i') || expression.includes('[')) {		printOutput("Error: unsupported data type in the equation expression");		return false;	}	return true;}function checkUnintroducedValues(expression, functionVariable) {	let variables = expression.split(/[^a-zA-Z]/).filter(n => n);	if (variables.length > 0) {		for (let element of variables) {			if (element !== functionVariable) {				printOutput("Error: unintroduced value usage");				return false;			}		}	}	return true;}function checkUnsupportedSyntax(expression) {	let functionName = expression.substring(0, expression.indexOf('('));	expression = savedVariables[functionName].value;	expression = expression.split(' ').join('');	let variable = savedVariables[functionName].variableName;	if (expression.includes('(')) {		printOutput("Error: unsupported syntax. Cannot contain '()'");		return false;	}	if (expression.includes('%')) {		printOutput("Error: unsupported syntax. Cannot contain '%'");		return false;	}	expression = expression.split(variable).filter(n => n);	for (let i = 0; i < expression.length; i++) {		if (['*', '/'].includes(expression[i][0])) {			printOutput("Error: unsupported syntax. Variable name cannot be " +				"followed by '*' or '/'");			return false;		}	}	return true;}function equation_solver(left, right) {	if (equationCheck(left, right) &&		checkUnsupportedSyntax(left) &&		checkUnsupportedTypes(right)) {		let functionName = left.substring(0, left.indexOf('('));		let variable = savedVariables[functionName].variableName;		right = right.split('?').join('');		right = convert(right);		right = functionConverter(right);		if (checkUnintroducedValues(right, variable)) {			if (right.includes(variable) && right.includes('(')) {				printOutput("Error: equation cannot simultaneously contain function variable" +					" and '()'");				return null;			}			if (!(right.includes(variable)))				right = calculation(right);			left = savedVariables[functionName].value;			let input_string = left + ' = ' + right;			if (variable !== 'X' || variable !== 'x') {				while (input_string.includes(variable))					input_string = input_string.replace(variable, 'X');			}			let degreeMap = parser(input_string);			let polynomial_degree = polynomial_degree_getter(degreeMap);			if (reducer(degreeMap, input_string.toUpperCase(), variable))				printOutput("Reduced form: " + reducer(degreeMap, input_string.toUpperCase(), variable));			if (polynomial_degree > 2) {				printOutput("The polynomial degree is strictly greater than 2, I can't solve it.");			} else {				let a = degreeMap.get(2);				if (a === undefined) {					a = 0;				}				let b = degreeMap.get(1);				if (b === undefined) {					b = 0;				}				let c = degreeMap.get(0);				if (c === undefined) {					c = 0;				}				solver(a, b, c);			}		}	}}